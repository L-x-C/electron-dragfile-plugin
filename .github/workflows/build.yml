name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: electron-dragfile-plugin.win32-x64-msvc.node
            platform: win32
          - os: macos-13
            target: x86_64-apple-darwin
            artifact: electron-dragfile-plugin.darwin-x64.node
            platform: darwin
          - os: macos-14
            target: aarch64-apple-darwin
            artifact: electron-dragfile-plugin.darwin-arm64.node
            platform: darwin

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    
    - name: Install dependencies
      run: npm install

    - name: Build native module
      run: npm run build:simple

    - name: Rename binary for platform (Unix)
      if: always() && matrix.os != 'windows-latest'
      run: |
        if [ -f "electron-dragfile-plugin.node" ]; then
          cp electron-dragfile-plugin.node ${{ matrix.artifact }}
          echo "✅ Binary renamed to ${{ matrix.artifact }}"
        else
          echo "❌ No binary found to rename"
        fi

    - name: Rename binary for platform (Windows)
      if: always() && matrix.os == 'windows-latest'
      run: |
        if (Test-Path "electron-dragfile-plugin.node") {
          Copy-Item "electron-dragfile-plugin.node" "${{ matrix.artifact }}"
          echo "✅ Binary renamed to ${{ matrix.artifact }}"
        } else {
          echo "❌ No binary found to rename"
        }

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.artifact }}
        path: ${{ matrix.artifact }}
        retention-days: 30

    - name: Build logs
      if: failure()
      run: |
        echo "Build failed for ${{ matrix.os }} (${{ matrix.target }})"
        ls -la target/ || echo "No target directory"
        ls -la *.node || echo "No .node files"

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true

    - name: List artifacts
      run: ls -la artifacts/

    - name: Install dependencies
      run: npm install

    - name: Update version in package.json and Cargo.toml
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Setting version to $VERSION"
        # Update package.json
        npm version $VERSION --no-git-tag-version
        # Update Cargo.toml to match
        sed -i.bak "s/^version = .*/version = \"$VERSION\"/" Cargo.toml

    - name: Copy platform binaries to current directory
      run: |
        cp artifacts/*.node ./
        ls -la *.node

    - name: Copy binaries to npm directory structure
      run: |
        mkdir -p npm/win32-x64-msvc
        mkdir -p npm/darwin-x64
        mkdir -p npm/darwin-arm64

        # Copy binaries to npm directories that napi prepublish expects
        if [ -f "electron-dragfile-plugin.win32-x64-msvc.node" ]; then
          cp electron-dragfile-plugin.win32-x64-msvc.node npm/win32-x64-msvc/
        fi
        if [ -f "electron-dragfile-plugin.darwin-x64.node" ]; then
          cp electron-dragfile-plugin.darwin-x64.node npm/darwin-x64/
        fi
        if [ -f "electron-dragfile-plugin.darwin-arm64.node" ]; then
          cp electron-dragfile-plugin.darwin-arm64.node npm/darwin-arm64/
        fi

        echo "Binary structure:"
        find npm -name "*.node" -exec ls -la {} \;

    - name: Prepublish
      run: npm run prepublishOnly

    - name: Verify prepublish results
      run: |
        echo "Files after prepublish:"
        ls -la *.node || echo "No .node files in root"
        echo "npm directory contents:"
        find npm -name "*.node" -exec ls -la {} \; || echo "No .node files in npm directory"

    - name: Publish to npm
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: |
          *.node
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}