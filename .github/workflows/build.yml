name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: electron-dragfile-plugin.win32-x64-msvc.node
            platform: win32
          - os: macos-13
            target: x86_64-apple-darwin
            artifact: electron-dragfile-plugin.darwin-x64.node
            platform: darwin
          - os: macos-14
            target: aarch64-apple-darwin
            artifact: electron-dragfile-plugin.darwin-arm64.node
            platform: darwin

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Build native module
      run: npm run build:simple

    - name: Rename binary for platform (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [ -f "electron-dragfile-plugin.node" ]; then
          cp electron-dragfile-plugin.node ${{ matrix.artifact }}
          echo "✅ Binary renamed to ${{ matrix.artifact }}"
        else
          echo "❌ No binary found to rename"
        fi

    - name: Rename binary for platform (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (Test-Path "electron-dragfile-plugin.node") {
          Copy-Item "electron-dragfile-plugin.node" "${{ matrix.artifact }}"
          echo "✅ Binary renamed to ${{ matrix.artifact }}"
        } else {
          echo "❌ No binary found to rename"
        }

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.artifact }}
        path: ${{ matrix.artifact }}
        retention-days: 30

    - name: Build logs (Unix)
      if: failure() && matrix.os != 'windows-latest'
      run: |
        echo "Build failed for ${{ matrix.os }} (${{ matrix.target }})"
        ls -la target/ || echo "No target directory"
        ls -la *.node || echo "No .node files"

    - name: Build logs (Windows)
      if: failure() && matrix.os == 'windows-latest'
      run: |
        echo "Build failed for ${{ matrix.os }} (${{ matrix.target }})"
        Get-ChildItem -Force target/ -ErrorAction SilentlyContinue || echo "No target directory"
        Get-ChildItem -Force *.node -ErrorAction SilentlyContinue || echo "No .node files"

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true

    - name: List artifacts
      run: |
        echo "📦 Downloaded artifacts:"
        ls -la artifacts/ || echo "No artifacts directory"

    - name: Install dependencies
      run: npm install

    - name: Update version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Setting version to $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

        # Only update version if different
        if [ "$(npm pkg get version | tr -d '"')" != "$VERSION" ]; then
          npm version $VERSION --no-git-tag-version
        else
          echo "Version already set to $VERSION, skipping npm version command"
        fi

    - name: Copy platform binaries
      run: |
        echo "🔧 Setting up multi-platform binaries..."

        # Copy all platform binaries to current directory
        cp artifacts/*.node ./
        ls -la *.node || echo "No .node files found"

    - name: Create platform packages
      run: |
        echo "📦 Creating platform-specific packages..."

        # Windows x64
        if [ -f "electron-dragfile-plugin.win32-x64-msvc.node" ]; then
          mkdir -p npm/win32-x64-msvc
          cp electron-dragfile-plugin.win32-x64-msvc.node npm/win32-x64-msvc/

          # Create package.json for Windows
          echo '{
            "name": "electron-dragfile-plugin-win32-x64-msvc",
            "version": "'"$VERSION"'",
            "description": "Native addon for detecting file drag events in Electron applications",
            "main": "electron-dragfile-plugin.win32-x64-msvc.node",
            "os": ["win32"],
            "cpu": ["x64"],
            "engines": {
              "node": ">= 14"
            }
          }' > npm/win32-x64-msvc/package.json
          echo "✅ Windows x64 package created"
        fi

        # macOS x64
        if [ -f "electron-dragfile-plugin.darwin-x64.node" ]; then
          mkdir -p npm/darwin-x64
          cp electron-dragfile-plugin.darwin-x64.node npm/darwin-x64/

          # Create package.json for macOS x64
          echo '{
            "name": "electron-dragfile-plugin-darwin-x64",
            "version": "'"$VERSION"'",
            "description": "Native addon for detecting file drag events in Electron applications",
            "main": "electron-dragfile-plugin.darwin-x64.node",
            "os": ["darwin"],
            "cpu": ["x64"],
            "engines": {
              "node": ">= 14"
            }
          }' > npm/darwin-x64/package.json
          echo "✅ macOS x64 package created"
        fi

        # macOS ARM64
        if [ -f "electron-dragfile-plugin.darwin-arm64.node" ]; then
          mkdir -p npm/darwin-arm64
          cp electron-dragfile-plugin.darwin-arm64.node npm/darwin-arm64/

          # Create package.json for macOS ARM64
          echo '{
            "name": "electron-dragfile-plugin-darwin-arm64",
            "version": "'"$VERSION"'",
            "description": "Native addon for detecting file drag events in Electron applications",
            "main": "electron-dragfile-plugin.darwin-arm64.node",
            "os": ["darwin"],
            "cpu": ["arm64"],
            "engines": {
              "node": ">= 14"
            }
          }' > npm/darwin-arm64/package.json
          echo "✅ macOS ARM64 package created"
        fi

        echo "📋 Package structure:"
        find npm -name "*.node" -exec ls -la {} \; 2>/dev/null || echo "No .node files found"
        find npm -name "package.json" -exec echo "📄 {}" \; 2>/dev/null || echo "No package.json files found"

    - name: Prepare for publishing
      run: |
        echo "🚀 Preparing for npm publishing..."

        # Ensure all required files exist
        echo "📁 Checking files in current directory:"
        ls -la

        echo "📋 Files to be published:"
        ls -la index.js README.md LICENSE package.json 2>/dev/null || echo "Some required files missing"

        # Check for TypeScript definitions
        if [ -f "index.d.ts" ]; then
          echo "✅ index.d.ts found"
        else
          echo "❌ index.d.ts not found, attempting to regenerate..."
          # Try to generate TypeScript definitions if they don't exist
          npx napi build --platform --release --target x86_64-apple-darwin || echo "Failed to generate index.d.ts"
        fi

        echo "🔧 Platform binaries:"
        find npm -name "*.node" -exec echo "  - {}" \;

        # List all .node files
        echo "📦 All .node files in root:"
        ls -la *.node 2>/dev/null || echo "No .node files in root"

    - name: Publish to npm
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: |
          *.node
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}